<?php
require_once 'castle_engine_functions.php';
castle_header('Cross-platform (desktop, mobile, consoles...) projects');

$toc = new TableOfContents(
  array(
    new TocItem('Introduction', 'introduction'),
    new TocItem('Building for various platforms', 'building'),
    new TocItem('Differences in input handling between mobile (touch) and desktop (mouse) platforms', 'input'),
    new TocItem('Things to avoid in cross-platform games', 'avoid'),
    new TocItem('Explaining the standard new project setup', 'new_project'),
      new TocItem('Standard GameInitialize unit', 'initialize_unit', 1),
      new TocItem('Optional standalone program file', 'program', 1),
  )
);

echo castle_thumbs(array(
  array('filename' => 'android12glued.png', 'titlealt' => 'Various Android applications developed using Castle Game Engine'),
));
?>

<?php echo $toc->html_toc(); ?>

<?php echo $toc->html_section(); ?>

<p><i>Castle Game Engine</i> allows to build applications for many platforms:

<ul>
  <li><p>desktop (Windows, Linux, <a href="macos">macOS</a>, FreeBSD, Raspberry Pi...),
  <li><p>mobile (<a href="android">Android</a>, <a href="ios">iOS</a>),
  <li><p><a href="nintendo_switch">Nintendo Switch</a>.
</ul>

<p>The engine hides as much as possible differences between these platforms,
exposing a nice cross-platform API.

<?php echo $toc->html_section(); ?>

<p>By default, the engine compiles and runs the project for the current platform. This is by far the easiest approach to just build and test your application on a desktop system, like Windows, Linux, FreeBSD and Raspberry Pi. The engine (including our editor and build tool) just run there.

<p>To build for a different platform:

<ul>
  <li>
    <p>Choose the target platform in <a href="manual_editor.php">the CGE editor</a> using the submenu <i>"Run -&gt; Platform (To Build And Run) -&gt; ..."</i>.
  <li>
    <p>Then build the project using <i>"Run -&gt; Compile"</i>, package to a redistributable format using <i>"Run -&gt; Package"</i> and so on.
</ul>

<p>Make sure that your compiler installation supports the necessary targets. For FPC, it is easy to install cross-compilers using e.g. <a href="fpcupdeluxe">fpcupdeluxe</a>. For <i>Delphi</i>, right now we only support Windows (32 and 64) targets.

<p>For some platforms, we have a dedicated manual page with instructions about what you need to install and how to use it. See:

<ul>
  <li><p><a href="https://castle-engine.io/android">Developing for Android</a>.

    <p>You will have to install <a href="https://castle-engine.io/android">Android SDK and FPC cross-compiler for Android</a>.

    <p>Then you can build and run for Android.

    <p>You can create a package in standard Android APK or AAB formats.

    <p>You can run the application, and observe logs, on Android device connected through USB.

  <li><p><a href="https://castle-engine.io/ios">Developing for iOS (iPhone, iPad)</a>.

    <p>Note that you need a macOS system to do this. And <a href="https://castle-engine.io/ios">FPC cross-compiler for iOS</a>.

    <p>Doing <i>"Run -&gt; Package"</i> for iOS by default just creates an <i>Xcode project</i>. You should open it in Xcode to run on a connected device, or in simulator, or release on the AppStore. We can also build IPA file for iOS.

  <li><p><a href="https://castle-engine.io/nintendo_switch">Nintendo Switch</a>.

    <p>For this, first you need to be a <a href="https://developer.nintendo.com/">registered and confirmed Nintendo developer</a>. Then we will provide you with a version of CGE that works on Nintendo Switch.
</ul>

<?php echo $toc->html_section(); ?>

<p>To create portable games you have to think about different types
of inputs available on some platforms:

<ul>
  <li>
    <p>On desktop most users will have a keyboard and a mouse. Supporting gamepad (joystick) is also possible.

  <li>
    <p>On mobile platforms most users will use the touch screen (even if it's possible to plug external
    keyboard or mouse at least to Android).
</ul>

<p>See <a href="touch_input">touch device input</a> for details.

<?php echo $toc->html_section(); ?>

<ul>
  <li><p>Do not call <code>Window.Open</code> or <code>Window.Close</code> or
    <code>Application.Run</code>
    inside the cross-platform unit like <code>gameinitialize.pas</code>.

    <p>These methods should never be explicitly called on non-desktop platforms.
    Even on the desktop platforms, they should only be called from the main program file
    (<code>xxx_standalone.dpr</code>), which may be auto-generated by the build tool.

  <li><p>Do not call <code>Application.Terminate</code> on platforms
    where users don't expect it. Use
    <?php echo cgeRef('TCastleApplicationProperties.ShowUserInterfaceToQuit', 'ApplicationProperties.ShowUserInterfaceToQuit'); ?>
    to show or hide the appropriate user interface,
    like a "<i>Quit Game</i>" button.
    Mobile applications generally don't have
    a buttton to quit &mdash; instead, mobile users just switch
    to a different application (or desktop) using the standard buttons.

    <p>Also, the <code>Application.Terminate</code> may not be implemented
    on some platforms where <code>ShowUserInterfaceToQuit</code> is <code>false</code>.

  <li><p>Do not create more than one <code>TCastleWindow</code> instance.
    If you want your game to be truly portable to <b>any</b> device &mdash;
    you have to limit yourself to using only one window.
    For normal games that's probably natural anyway.

    <p>Note that the engine still supports, and will always support,
    multiple-window programs.
    See e.g.<code>castle_game_engine/examples/window/multi_window.dpr</code> example.
    However, it only works on normal desktop systems.
    It is not possible to do portably (to seamlessly work on mobile and console systems)
    since other platforms don't have a concept of "window" that works like on desktops.
</ul>

<?php echo $toc->html_section(); ?>

<?php echo $toc->html_section(); ?>

<p>New projects created using the <a href="manual_editor.php">CGE editor</a>
are automatically cross-platform. All the  <i>"New Project"</i> templates (including <i>"Empty"</i>,
the simplest) follow the same approach.

<p>The starting point of every cross-platform project is a unit that initializes <code>Application.MainWindow</code>.
By default, this unit is called <code>GameInitialize</code> and it is present in your project
in <code>code/gameinitialize.pas</code>.
This unit looks like this:

<?php echo pascal_highlight_file('code-samples/gameinitialize.pas', false); ?>

<p>The <code>initialization</code> section at the bottom of the <code>GameInitialize</code>
unit should only assign a callback to <?php echo cgeRef('TCastleApplication.OnInitialize', 'Application.OnInitialize'); ?>,
and create and assign <code>Application.MainWindow</code>.
Most of the actual initialization (loading images, resources, setting up player
and such) should happen in the callback you assigned to <?php echo cgeRef('TCastleApplication.OnInitialize', 'Application.OnInitialize'); ?>.
At that point you know that your program is ready to load and prepare resources.

<!--
<p>The initialization <b>must assign the <?php echo cgeRef('TCastleApplication.MainWindow', 'Application.MainWindow'); ?></b> instance,
that will be used by platform-specific program/library code.
It should be a <?php echo cgeRef('TCastleWindow'); ?> class
instance (it may be a descendant of this class, of course).
-->

<p>This <code>GameInitialize</code> unit can be included by the main program / library file.
But usually you should not maintain yourself this main program / library file.
The <a href="https://castle-engine.io/build_tool">build tool</a>
will automatically generate the main program / library using the <code>GameInitialize</code> unit,
as necessary for compilation on a particular platform.

<?php echo $toc->html_section(); ?>

<p>Optionally, to be able to run and debug the project from Lazarus or Delphi,
we need a program file like <code>xxx_standalone.dpr</code>.

<p>You should not create or maintain such file manually.
Instead, it should be automatically generated for new projects.
You can also always regenerate it using editor menu <i>"Code -&gt; Regenerate Project (overwrites LPI, DPR, DPROJ, CastleAutoGenerated)"</i>
or using command-line:

<pre>castle-engine generate-program</pre>

<p>You should not customize the generated <code>xxx_standalone.dpr</code>
file. While such customizations would work in the short term,
they would prevent from regenerating this file. It's better to leave it auto-generated,
and place your necessary initialization (even things like command-like parsing)
in your units, like <code>gameinitialize.pas</code>.

<p>To make our build tool use your customized program file (instead of the auto-generated
one), be sure to set <code>standalone_source</code> in the <code>CastleEngineManifest.xml</code>.
It is already set OK in new projects created using our editor.

<!--

<p>Note that <b>you can edit and run the desktop version using <i>Lazarus</i></b>,
to benefit from Lazarus editor, code tools, integrated debugger...
Using our build tool does not prevent using Lazarus at all!
Just open the created LPI file.

<ul>
  <li>If you did not create the <code>lpi</code> file using
    <code>castle-engine generate-program</code>, you can create it manually:
    Simply create in Lazarus a new project using the <i>New -&gt; Project -&gt; Simple Program</i>
    option. Or (if you already have the <code>xxx.dpr</code> file) create
    the project using <i>Project -&gt; New Project From File...</i>.
  <li>Add to the project requirements packages <code>castle_engine_base</code> and <code>castle_engine_window</code>
    (from <i>Project -&gt; Project Inspector</i>, you want to <i>Add</i> a <i>New Requirement</i>).
  <li>Save the project as <code>my_fantastic_game_standalone.lpi</code>.
  <li>...and develop and run as usual.
  <li>Edit the main <code>my_fantastic_game_standalone.dpr</code>
    file using the <i>Project -&gt; View Project Source</i> option in Lazarus.
</ul>
-->

<?php
castle_footer();
?>
